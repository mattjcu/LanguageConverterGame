{"ast":null,"code":"import { Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, of, exhaustMap, map } from 'rxjs';\nimport { MessageService } from 'src/app/services/message.service';\nimport * as CreateMessageActions from './createMessage.actions';\nimport * as GetMessageActions from './getMessage.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/message.service\";\nimport * as i3 from \"@angular/router\";\nexport let CreateMessageEffects = /*#__PURE__*/(() => {\n  class CreateMessageEffects {\n    constructor(actions$, messageService, router) {\n      this.actions$ = actions$;\n      this.messageService = messageService;\n      this.router = router;\n      this.messageRequest$ = createEffect(() => this.actions$.pipe(ofType(CreateMessageActions.createMessageRequest), exhaustMap(action => this.messageService.createMessage(action.userName, action.message).pipe(map(response => CreateMessageActions.createMessageSuccess(response)), catchError(error => of(CreateMessageActions.createMessageFailure(error)))))));\n      this.messageCreateRequest$ = createEffect(() => this.actions$.pipe(ofType(CreateMessageActions.createMessageSuccess), exhaustMap(action => this.messageService.getMessages().pipe(map(response => GetMessageActions.getMessageRequest()), catchError(error => of(CreateMessageActions.createMessageFailure(error)))))));\n    }\n\n  }\n\n  CreateMessageEffects.ɵfac = function CreateMessageEffects_Factory(t) {\n    return new (t || CreateMessageEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.Router));\n  };\n\n  CreateMessageEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateMessageEffects,\n    factory: CreateMessageEffects.ɵfac\n  });\n  return CreateMessageEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}