{"ast":null,"code":"import { createFeatureSelector, createSelector, createReducer, on } from '@ngrx/store';\nimport * as fromActions from '../messageBoard/message.actions';\nimport * as fromAdapter from '../messageBoard/message.adapter';\nexport const initialState = fromAdapter.adapter.getInitialState({\n  selectedMessageId: ''\n});\n\nconst _messageReducer = createReducer(initialState, on(fromActions.AddMessage, (state, {\n  payload\n}) => fromAdapter.adapter.addOne(payload.message, state)), on(fromActions.LoadMessageSuccess, (state, {\n  payload\n}) => {\n  state = fromAdapter.adapter.removeAll(Object.assign(Object.assign({}, state), {\n    selectedMessageId: ''\n  }));\n  return fromAdapter.adapter.addMany(payload.messages, state);\n}), on(fromActions.TranslateMessage, (state, {\n  payload\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    message: payload.message\n  });\n}));\n\nexport function messageReducer(state, action) {\n  return _messageReducer(state, action);\n} // Creating selectors\n\nexport const getSelectedMessageId = state => state.selectedMessageId;\nexport const getMessageState = createFeatureSelector('message');\nexport const selectMessageIds = createSelector(getMessageState, fromAdapter.selectMessageIds);\nexport const selectMessageEntities = createSelector(getMessageState, fromAdapter.selectMessageEntities);\nexport const selectAllMessages = createSelector(getMessageState, fromAdapter.selectAllMessage);\nexport const selectCurrentMessageId = createSelector(getMessageState, getSelectedMessageId);\nexport const selectCurrentMessage = createSelector(selectMessageEntities, selectCurrentMessageId, (MessageEntities, MessageId) => MessageEntities[MessageId]);","map":null,"metadata":{},"sourceType":"module"}