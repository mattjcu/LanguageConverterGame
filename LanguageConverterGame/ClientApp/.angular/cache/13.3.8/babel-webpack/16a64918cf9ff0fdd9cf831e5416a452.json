{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { Store } from \"@ngrx/store\";\nimport { Message } from \"../models/Message\";\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { interval } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { selectAllMessages } from '../state/messageBoard/message.reducer';\nimport * as MessageActions from '../state/messageBoard/message.actions';\nimport * as fromAuth from '../state/auth/auth.reducer';\nlet HomeComponent = class HomeComponent {\n  constructor(store) {\n    this.store = store;\n    this.messageForm = new FormGroup({\n      message: new FormControl('')\n    });\n    this.hiddenItems = {};\n    this.jwtToken$ = this.store.select(fromAuth.selectToken);\n    this.user$ = this.store.select(fromAuth.selectUser).subscribe(data => this.userName = data);\n  }\n\n  ngOnInit() {\n    this.load();\n    this.setUpPoll();\n  }\n\n  ngOnDestroy() {\n    this.timeInterval.unsubscribe();\n  }\n\n  onSubmit() {\n    const msg = new Message({\n      message: this.message,\n      userName: this.userName\n    });\n    this.store.dispatch(MessageActions.AddMessage({\n      payload: {\n        message: msg\n      }\n    }));\n    this.messageForm.reset();\n  }\n\n  load() {\n    this.messages = this.store.select(selectAllMessages);\n    this.store.dispatch(MessageActions.LoadMessage());\n    this.messageForm.get('message').valueChanges.subscribe(data => {\n      this.message = data;\n    });\n  }\n\n  setUpPoll() {\n    this.timeInterval = interval(5000).pipe(startWith(0), tap(() => this.store.dispatch(MessageActions.LoadMessage()))).subscribe(res => this.messages = this.store.select(selectAllMessages));\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n}), __metadata(\"design:paramtypes\", [Store])], HomeComponent);\nexport { HomeComponent };","map":null,"metadata":{},"sourceType":"module"}