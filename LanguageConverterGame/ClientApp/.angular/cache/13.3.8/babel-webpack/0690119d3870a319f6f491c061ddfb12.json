{"ast":null,"code":"import { switchMap } from 'rxjs/operators';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map } from 'rxjs';\nimport { MessageService } from 'src/app/services/message.service';\nimport * as MessageActions from './message.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/message.service\";\nexport let MessageEffects = /*#__PURE__*/(() => {\n  class MessageEffects {\n    constructor(actions$, messageService) {\n      this.actions$ = actions$;\n      this.messageService = messageService;\n      this.loadAllMessages$ = createEffect(() => this.actions$.pipe(ofType(MessageActions.LoadMessage), switchMap(() => this.messageService.getMessages().pipe(map(data => MessageActions.LoadMessageSuccess({\n        payload: {\n          messages: data\n        }\n      }))))));\n      this.createMessage$ = createEffect(() => this.actions$.pipe(ofType(MessageActions.AddMessage), switchMap(action => this.messageService.createMessage(action.payload.message.userName, action.payload.message.message).pipe(map(response => MessageActions.LoadMessage())))));\n      this.translateMessage$ = createEffect(() => this.actions$.pipe(ofType(MessageActions.TranslateMessage), switchMap(action => this.messageService.translateMessage(action.payload.message.message).pipe(map(response => MessageActions.LoadMessage())))));\n    }\n\n  }\n\n  MessageEffects.ɵfac = function MessageEffects_Factory(t) {\n    return new (t || MessageEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MessageService));\n  };\n\n  MessageEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageEffects,\n    factory: MessageEffects.ɵfac\n  });\n  return MessageEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}