{"ast":null,"code":"import { Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, of, exhaustMap, map, tap } from 'rxjs';\nimport * as AuthActions from '../auth/auth.actions';\nimport * as RegisterActions from '../register/register.actions';\nimport { AuthService } from 'src/app/services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService, router) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.router = router;\n      this.loginRequest$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginRequest, RegisterActions.registerSuccess), exhaustMap(action => this.authService.login(action.userName, action.passWord).pipe(map(response => AuthActions.loginSuccess(response)), catchError(error => of(AuthActions.loginFailure(error)))))));\n      this.loginSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginSuccess), tap(({\n        userName\n      }) => {\n        this.router.navigateByUrl('/');\n      })), {\n        dispatch: false\n      });\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}