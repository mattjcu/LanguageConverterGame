{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, mergeMap } from 'rxjs';\nimport { getMessages } from './getMessage.reducer';\nimport { MessageService } from 'src/app/services/message.service';\nimport * as GetMessageActions from './getMessage.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/services/message.service\";\nexport let GetMessageEffects = /*#__PURE__*/(() => {\n  class GetMessageEffects {\n    constructor(actions$, store, messageService) {\n      this.actions$ = actions$;\n      this.store = store;\n      this.messageService = messageService;\n      this.messageRequest$ = createEffect(() => {\n        return this.actions$.pipe(ofType(GetMessageActions.getMessageRequest), withLatestFrom(this.store.select(getMessages)), mergeMap(([action, messages]) => {\n          if (!messages.length || messages.length === 1) {\n            return this.messageService.getMessages().pipe(map(messages => {\n              return GetMessageActions.getMessageSuccess({\n                messages\n              });\n            }));\n          }\n\n          return [];\n        }));\n      });\n    }\n\n  }\n\n  GetMessageEffects.ɵfac = function GetMessageEffects_Factory(t) {\n    return new (t || GetMessageEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.MessageService));\n  };\n\n  GetMessageEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetMessageEffects,\n    factory: GetMessageEffects.ɵfac\n  });\n  return GetMessageEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}